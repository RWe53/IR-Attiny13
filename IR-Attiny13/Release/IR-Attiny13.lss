
IR-Attiny13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000014c  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000238  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000365  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002a8  00000000  00000000  000005bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038a  00000000  00000000  00000865  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f6  00000000  00000000  00000bef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__vector_1>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	09 c0       	rjmp	.+18     	; 0x22 <__vector_7>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	73 d0       	rcall	.+230    	; 0x104 <main>
  1e:	94 c0       	rjmp	.+296    	; 0x148 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <__vector_7>:


//** Interrup IR_RAM timer **
            .global TIM0_COMPB_vect
TIM0_COMPB_vect:  
            push  r0
  22:	0f 92       	push	r0
            in		r0,0x3f							
  24:	0f b6       	in	r0, 0x3f	; 63
            push  r0
  26:	0f 92       	push	r0
						lds		r0,(OCR0B)								//Setup next time Interrupt  
  28:	00 90 49 00 	lds	r0, 0x0049	; 0x800049 <__EEPROM_REGION_LENGTH__+0x7f0049>
						inc		r0												//add 1			
  2c:	03 94       	inc	r0
						sts		(OCR0B),r0                              
  2e:	00 92 49 00 	sts	0x0049, r0	; 0x800049 <__EEPROM_REGION_LENGTH__+0x7f0049>
            lds		r0,(IR_RAM+6)
  32:	00 90 66 00 	lds	r0, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
            inc		r0	
  36:	03 94       	inc	r0
						sts		(IR_RAM+6),r0 					
  38:	00 92 66 00 	sts	0x0066, r0	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
            pop		r0                  
  3c:	0f 90       	pop	r0
            out		0x3f,r0							
  3e:	0f be       	out	0x3f, r0	; 63
            pop		r0
  40:	0f 90       	pop	r0
						reti
  42:	18 95       	reti

00000044 <__vector_1>:


            .global INT0_vect
INT0_vect:
						sei
  44:	78 94       	sei
						push  r0
  46:	0f 92       	push	r0
            in		r0,0x3f							
  48:	0f b6       	in	r0, 0x3f	; 63
            push  r0						
  4a:	0f 92       	push	r0
            push	r16
  4c:	0f 93       	push	r16
						push  r30
  4e:	ef 93       	push	r30
						push	r31
  50:	ff 93       	push	r31
						ldi		r30,lo8(IR_RAM)
  52:	e0 e6       	ldi	r30, 0x60	; 96
						ldi		r31,hi8(IR_RAM)						
  54:	f0 e0       	ldi	r31, 0x00	; 0
						ld		r16,Z									//IR_RAMStatus b0 ready
  56:	00 81       	ld	r16, Z
            ori		r16,0x80
  58:	00 68       	ori	r16, 0x80	; 128
            st		Z,r16
  5a:	00 83       	st	Z, r16
            andi	r16,1
  5c:	01 70       	andi	r16, 0x01	; 1
            breq	Not_0				
  5e:	f9 f0       	breq	.+62     	; 0x9e <Not_0>
            ldd		r16,Z+6								//Controling 2,25ms     
  60:	06 81       	ldd	r16, Z+6	; 0x06
            cpi		r16,38								
  62:	06 32       	cpi	r16, 0x26	; 38
            brlo	Not_1									//branch if Lower
  64:	20 f0       	brcs	.+8      	; 0x6e <Not_1>
            cpi		r16,44
  66:	0c 32       	cpi	r16, 0x2C	; 44
            brsh	Not_1								
  68:	10 f4       	brcc	.+4      	; 0x6e <Not_1>
            SEC													// bit C '1'
  6a:	08 94       	sec
            rjmp	common         
  6c:	06 c0       	rjmp	.+12     	; 0x7a <common>

0000006e <Not_1>:
Not_1:      ldd		r16,Z+6								//Controling 1,125ms 
  6e:	06 81       	ldd	r16, Z+6	; 0x06
            cpi		r16,16								
  70:	00 31       	cpi	r16, 0x10	; 16
            brlo	Not_0									//branch if Lower
  72:	a8 f0       	brcs	.+42     	; 0x9e <Not_0>
            cpi		r16,24
  74:	08 31       	cpi	r16, 0x18	; 24
            brsh	Not_0										
  76:	98 f4       	brcc	.+38     	; 0x9e <Not_0>
            CLC													//bit C '0'    
  78:	88 94       	clc

0000007a <common>:
common:     ldd		r16,Z+5
  7a:	05 81       	ldd	r16, Z+5	; 0x05
            ror		r16
  7c:	07 95       	ror	r16
            std		Z+5,r16
  7e:	05 83       	std	Z+5, r16	; 0x05
            ldd		r16,Z+4
  80:	04 81       	ldd	r16, Z+4	; 0x04
            ror		r16
  82:	07 95       	ror	r16
            std		Z+4,r16
  84:	04 83       	std	Z+4, r16	; 0x04
            ldd		r16,Z+3
  86:	03 81       	ldd	r16, Z+3	; 0x03
            ror		r16  
  88:	07 95       	ror	r16
            std		Z+3,r16
  8a:	03 83       	std	Z+3, r16	; 0x03
            ldd		r16,Z+2
  8c:	02 81       	ldd	r16, Z+2	; 0x02
            ror		r16   
  8e:	07 95       	ror	r16
            std		Z+2,r16
  90:	02 83       	std	Z+2, r16	; 0x02
            ldd		r16,Z+1
  92:	01 81       	ldd	r16, Z+1	; 0x01
            inc		r16
  94:	03 95       	inc	r16
            std		Z+1,r16
  96:	01 83       	std	Z+1, r16	; 0x01
            cpi		r16,33
  98:	01 32       	cpi	r16, 0x21	; 33
            brsh	Not_0
  9a:	08 f4       	brcc	.+2      	; 0x9e <Not_0>
            rjmp	Not1    
  9c:	0c c0       	rjmp	.+24     	; 0xb6 <Not1>

0000009e <Not_0>:
Not_0:			ldd		r16,Z+6								//Controling 9 + 4,5 = 13,5ms (Start)
  9e:	06 81       	ldd	r16, Z+6	; 0x06
            cpi		r16,220	
  a0:	0c 3d       	cpi	r16, 0xDC	; 220
            brlo	Not1									//branch if Lower
  a2:	48 f0       	brcs	.+18     	; 0xb6 <Not1>
			      cpi		r16,250	
  a4:	0a 3f       	cpi	r16, 0xFA	; 250
            brsh	Not1														 			
  a6:	38 f4       	brcc	.+14     	; 0xb6 <Not1>
            ld		r16,Z									//IR_RAMStatus b0 ready
  a8:	00 81       	ld	r16, Z
            sbr		r16,1
  aa:	01 60       	ori	r16, 0x01	; 1
            cbr		r16,2
  ac:	0d 7f       	andi	r16, 0xFD	; 253
            cbr		r16,4
  ae:	0b 7f       	andi	r16, 0xFB	; 251
            st		Z,r16
  b0:	00 83       	st	Z, r16
            clr		r16
  b2:	00 27       	eor	r16, r16
            std		Z+1,r16								//IR_RAMIndex
  b4:	01 83       	std	Z+1, r16	; 0x01

000000b6 <Not1>:
Not1:       ldd		r16,Z+6								//Controling  9 + 2,25 = 11,25ms (Repeat)
  b6:	06 81       	ldd	r16, Z+6	; 0x06
            cpi		r16,180          
  b8:	04 3b       	cpi	r16, 0xB4	; 180
            brlo	Not1y				
  ba:	28 f0       	brcs	.+10     	; 0xc6 <Not1y>
            cpi		r16,215              
  bc:	07 3d       	cpi	r16, 0xD7	; 215
						brsh	Not1y												
  be:	18 f4       	brcc	.+6      	; 0xc6 <Not1y>
            ld		r16,Z  
  c0:	00 81       	ld	r16, Z
            sbr		r16,8									//set bit3 Repeat
  c2:	08 60       	ori	r16, 0x08	; 8
            st		Z,r16   
  c4:	00 83       	st	Z, r16

000000c6 <Not1y>:
Not1y:      ld		r16,Z									//IR_RAMStatus b1 ready
  c6:	00 81       	ld	r16, Z
            andi	r16,1
  c8:	01 70       	andi	r16, 0x01	; 1
            breq	Not2
  ca:	99 f0       	breq	.+38     	; 0xf2 <Not2>
            ldd		r16,Z+1    
  cc:	01 81       	ldd	r16, Z+1	; 0x01
            cpi		r16,32								//32 counter remotecontrol code
  ce:	00 32       	cpi	r16, 0x20	; 32
            brne	Not2				
  d0:	81 f4       	brne	.+32     	; 0xf2 <Not2>
            clr		r16
  d2:	00 27       	eor	r16, r16
            std		Z+1,r16
  d4:	01 83       	std	Z+1, r16	; 0x01
            ld		r16,Z									//IR_RAMStatus b0 ready
  d6:	00 81       	ld	r16, Z
            sbr		r16,4
  d8:	04 60       	ori	r16, 0x04	; 4
            st		Z,r16					
  da:	00 83       	st	Z, r16
            ldd		r0,Z+2								//IR_RAMStatus b1 ready
  dc:	02 80       	ldd	r0, Z+2	; 0x02
           	ldi   r16,0x0								//Adress1   Factory remote controler lower byte
  de:	00 e0       	ldi	r16, 0x00	; 0
            cp		r0,r16								
  e0:	00 16       	cp	r0, r16
            brne	Not2						
  e2:	39 f4       	brne	.+14     	; 0xf2 <Not2>
            ldd		r0,Z+3								//IR_RAMStatus b1 is ready
  e4:	03 80       	ldd	r0, Z+3	; 0x03
						ldi		r16,0xFF  						//Address2 Factory remote controler higer byte
  e6:	0f ef       	ldi	r16, 0xFF	; 255
            cp		r0,r16								
  e8:	00 16       	cp	r0, r16
            brne	Not2									//not correct brand remote controler							
  ea:	19 f4       	brne	.+6      	; 0xf2 <Not2>
            ld		r16,Z									//IR_RAMStatus b0 ready
  ec:	00 81       	ld	r16, Z
            sbr		r16,2
  ee:	02 60       	ori	r16, 0x02	; 2
            st		Z,r16
  f0:	00 83       	st	Z, r16

000000f2 <Not2>:
Not2:       clr		r16         
  f2:	00 27       	eor	r16, r16
            std		Z+6,r16	        
  f4:	06 83       	std	Z+6, r16	; 0x06
						pop		r31
  f6:	ff 91       	pop	r31
						pop		r30
  f8:	ef 91       	pop	r30
						pop		r16
  fa:	0f 91       	pop	r16
            pop		r0                  
  fc:	0f 90       	pop	r0
            out		0x3f,r0							
  fe:	0f be       	out	0x3f, r0	; 63
            pop		r0
 100:	0f 90       	pop	r0
						reti
 102:	18 95       	reti

00000104 <main>:
 104:	8f e7       	ldi	r24, 0x7F	; 127
 106:	81 bf       	out	0x31, r24	; 49
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	86 bd       	out	0x26, r24	; 38
 10c:	16 bc       	out	0x26, r1	; 38
 10e:	80 e1       	ldi	r24, 0x10	; 16
 110:	87 bb       	out	0x17, r24	; 23
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	88 bb       	out	0x18, r24	; 24
 116:	95 e0       	ldi	r25, 0x05	; 5
 118:	93 bf       	out	0x33, r25	; 51
 11a:	12 be       	out	0x32, r1	; 50
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	99 bd       	out	0x29, r25	; 41
 120:	98 e0       	ldi	r25, 0x08	; 8
 122:	99 bf       	out	0x39, r25	; 57
 124:	90 e4       	ldi	r25, 0x40	; 64
 126:	9b bf       	out	0x3b, r25	; 59
 128:	85 bf       	out	0x35, r24	; 53
 12a:	78 94       	sei
 12c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 130:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 134:	81 ff       	sbrs	r24, 1
 136:	06 c0       	rjmp	.+12     	; 0x144 <main+0x40>
 138:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 13c:	80 34       	cpi	r24, 0x40	; 64
 13e:	11 f4       	brne	.+4      	; 0x144 <main+0x40>
 140:	c4 9a       	sbi	0x18, 4	; 24
 142:	f6 cf       	rjmp	.-20     	; 0x130 <main+0x2c>
 144:	c4 98       	cbi	0x18, 4	; 24
 146:	f4 cf       	rjmp	.-24     	; 0x130 <main+0x2c>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
